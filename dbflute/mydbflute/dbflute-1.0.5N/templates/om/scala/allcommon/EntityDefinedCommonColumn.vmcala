##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import org.seasar.dbflute.Entity;

/**
 * The interface of entity defined common columns.
 * @author ${database.classAuthor}
 */
trait ${glEntityDefinedCommonColumn} extends Entity {
#if ($database.isExistCommonColumnSetupElement())
#foreach ($columnName in ${database.commonColumnNameList})
#set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
#set ($commonColumnMap = ${database.CommonColumnMap})
#set ($columnType = ${commonColumnMap.get(${columnName})})
#set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
#set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})

    /**
     * Get the value of ${uncapitalisedJavaName}.
     * @return The instance of the property type. (NullAllowed)
     */
    def get${javaName}(): ${javaNative};

#if (!$database.isForcedClassificationHandling() || !$database.isAllClassificationColumn($filteredColumnName))
    /**
     * Set the value of ${uncapitalisedJavaName}.
     * @param ${uncapitalisedJavaName} The instance of the property type. (NullAllowed)
     */
    def set${javaName}(${uncapitalisedJavaName}: ${javaNative}): Unit;
#end
#if ($database.isAllClassificationColumn($filteredColumnName))
#set ($classificationName = $database.getAllClassificationName($filteredColumnName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#foreach ($classificationElement in $classificationTop.classificationElementList)

    /**
     * Set the value of ${uncapitalisedJavaName} as ${classificationElement.name}. <br />
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     */
    def set${javaName}_${classificationElement.name}(): Unit;

    /**
     * Is the value of ${uncapitalisedJavaName} '${classificationElement.name}'? <br />
     * $database.buildClassificationApplicationCommentForJavaDoc($classificationElement)
     * <p>It's treated as case insensitive and if the code value is null, it returns false.</p>
     * @return The determination, true or false.
     */
    def is${javaName}${classificationElement.name}(): Boolean;
#end
#end
#end
#end
}
